" neobundle,.vimでvimのプラグインを管理する
" なければ、githubから取得する

let s:neobundle_dir = expand('~/.bundle')
if has('vim_starting') "{{{
  " Set runtimepath.
  " Load neobundle.
  if isdirectory('neobundle.vim')
    set runtimepath+=neobundle.vim
  elseif finddir('neobundle.vim', '.;') != ''
    execute 'set runtimepath+=' . finddir('neobundle.vim', '.;')
  elseif &runtimepath !~ '/neobundle.vim'
    if !isdirectory(s:neobundle_dir.'/neobundle.vim')
      execute printf('!git clone %s://github.com/Shougo/neobundle.vim.git',
            \ (exists('$http_proxy') ? 'https' : 'git'))
            \ s:neobundle_dir.'/neobundle.vim'
    endif
    execute 'set runtimepath+=' . s:neobundle_dir.'/neobundle.vim'
  endif
endif
"}}}

let g:neobundle#enable_tail_path = 1
let g:neobundle#default_options = {
      \ 'default' : { 'overwrite' : 0 },
      \ }

call neobundle#rc(s:neobundle_dir)

" 環境設定 {{{
  " プラグイン管理
  NeoBundleFetch 'Shougo/neobundle.vim', '', 'default'
  " 日本語ヘルプ
  " :help {検索ワード}, :helpgrep {検索ワード}
  " :help eval@en @enをつけると英語で検索
  " :helpgrepで検索結果を確認するための手順
  " :helpgrep locale 1. :helpgrepコマンドでヘルプ検索を行う
  " :cwindow :cwindowコマンドでQuickFixウィンドウを開いて、検索結果を確認
  " :cclose :ccloseコマンドでQuickFixウィンドウを閉じる
  NeoBundle 'vim-jp/vimdoc-ja'

  " 文字コード自動判別プラグイン
  NeoBundle 'banyan/recognize_charcode.vim'

  " ステータスライン
  NeoBundle 'Lokaltog/powerline',  { 'rtp' : 'powerline/bindings/vim'}

  " シンタックス
  " color 色
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'vim-scripts/twilight'
NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'vim-scripts/Wombat'
NeoBundle 'tomasr/molokai'
NeoBundle 'vim-scripts/rdark'
  " 言語ごとの文法
  " jQuery
  NeoBundle 'jQuery'
  " nginx conf
  NeoBundle 'nginx.vim'
  " markdown
  NeoBundle 'tpope/vim-markdown'
  " clojure
  NeoBundle 'jondistad/vimclojure'
  " 色々な言語のsyntaxをチェック.
  NeoBundle 'scrooloose/syntastic'
" }}}

" unite.vim  {{{
NeoBundle 'Shougo/unite.vim', '', 'default'
call neobundle#config('unite.vim',{
      \ 'lazy' : 1,
      \ 'autoload' : {
      \   'commands' : [{ 'name' : 'Unite',
      \                   'complete' : 'customlist,unite#complete_source'},
      \                 'UniteWithCursorWord', 'UniteWithInput']
      \ }})
NeoBundle 'Shougo/unite-build', '', 'default'
NeoBundle 'Shougo/unite-ssh', '', 'default'
NeoBundleLazy 'ujihisa/vimshell-ssh', { 'autoload' : {
      \ 'filetypes' : 'vimshell',
      \ }}
NeoBundle 'Shougo/unite-sudo', '', 'default'
NeoBundleLazy 'Shougo/unite-help', { 'autoload' : {
      \ 'unite_sources' : 'help'
      \ }}
NeoBundle 'Shougo/unite-outline', '', 'default'
call neobundle#config('unite-outline', {
      \ 'lazy' : 1,
      \ 'autoload' : {
      \   'unite_sources' : 'outline'},
      \ })
NeoBundleLazy 'tsukkee/unite-tag', { 'autoload' : {
      \ 'unite_sources' : 'tag'
      \ }}
NeoBundleLazy 'thinca/vim-unite-history', { 'autoload' : {
      \ 'unite_sources' : ['history/command', 'history/search']
      \ }}
" }}}

" ファイル操作 {{{
  " バッファ
  " Buffer管理のLibrary
  NeoBundle 'thinca/vim-openbuf'
  " DumbBuf.vim : quickbufっぽくbufferを管理。 "<Leader>b<Space>でBufferList
  NeoBundle 'DumbBuf'
  " minibufexpl.vim : タブエディタ風にバッファ管理ウィンドウを表示
  NeoBundle 'minibufexpl.vim'
  " NERDTree : ツリー型エクスプローラ
  NeoBundle 'The-NERD-tree'
  " vtreeexplorer.vim : ツリー状にファイルやディレクトリの一覧を表示
  NeoBundle 'vtreeexplorer'
" netrwじゃなくて、vimfilerでファイル操作する
NeoBundle 'Shougo/vimfiler', '', 'default'
call neobundle#config('vimfiler', {
      \ 'lazy' : 1,
      \ 'depends' : 'Shougo/unite.vim',
      \ 'autoload' : {
      \    'commands' : [
      \                  { 'name' : 'VimFiler',
      \                    'complete' : 'customlist,vimfiler#complete' },
      \                  { 'name' : 'VimFilerExplorer',
      \                    'complete' : 'customlist,vimfiler#complete' },
      \                  { 'name' : 'Edit',
      \                    'complete' : 'customlist,vimfiler#complete' },
      \                  { 'name' : 'Write',
      \                    'complete' : 'customlist,vimfiler#complete' },
      \                  'Read', 'Source'],
      \    'mappings' : ['<Plug>(vimfiler_switch)'],
      \    'explorer' : 1,
      \ }
      \ })
  " undo履歴を追える (need python support)
  NeoBundle 'Gundo'
  " vimからGit操作する
  NeoBundle 'tpope/vim-fugitive'
" }}}

" 比較、検索 compare search  {{{
" ag(The Silver Searcher)で検索する
" :Ag [options] {pattern} [{directory}]
NeoBundle 'rking/ag.vim'
" マークダウン用フォールディング {{{ }}} で折り畳む設定プラグイン
NeoBundleLazy 'thinca/vim-ft-markdown_fold', { 'autoload' : {
      \ 'filetypes' : ['markdown']
      \ }}
NeoBundleLazy 'thinca/vim-ft-help_fold', {
      \ 'autoload' : {
      \   'filetypes' : ['help']
      \ }}
  " matchit.vim : 「%」による対応括弧へのカーソル移動機能を拡張
  NeoBundle 'matchit.zip'
  " ruby用のmatchit拡張
  NeoBundle 'ruby-matchit'
  " open-browser.vim : カーソルの下のURLを開くor単語を検索エンジンで検索
  NeoBundle 'tyru/open-browser.vim'
" }}}

" 作業効率 {{{
  " YankRing.vim : ヤンクの履歴を管理し、順々に参照、出力できるようにする
  " pコマンドでペースト実行後 CTRL-Pか、CTRL-N
  NeoBundle 'YankRing.vim'
  " visually indent guide インデント量の違いをハイライト表示する
  NeoBundle 'nathanaelkane/vim-indent-guides'
" }}}

" 編集 {{{
  " XMLとかHTMLとかの編集機能を強化する
  NeoBundle 'xmledit'
  " Align : 高機能整形・桁揃えプラグイン
  NeoBundle 'Align'
  " フィルタリングと整形
  NeoBundle 'godlygeek/tabular'
  " マルチバイト対応の整形
  NeoBundle 'h1mesuke/vim-alignta'
" テキストオブジェクトを括弧やダブルクォートで囲む
NeoBundle 'anyakichi/vim-surround', {
      \ 'autoload' : {
      \   'mappings' : [
      \     ['n', '<Plug>Dsurround'], ['n', '<Plug>Csurround'],
      \     ['n', '<Plug>Ysurround'], ['n', '<Plug>YSurround']
      \ ]}}
  " textobj-user : 簡単にVimエディタのテキストオブジェクトをつくれる
  NeoBundle 'textobj-user'
  " vim-textobj-syntax : syntax hilightされたものをtext-objectに
  NeoBundle 'kana/vim-textobj-syntax.git'
  " vim-textobj-plugins : いろんなものをtext-objectにする
  NeoBundle 'thinca/vim-textobj-plugins.git'
  " vim-textobj-lastpat : 最後に検索されたパターンをtext-objectに
  NeoBundle 'kana/vim-textobj-lastpat.git'
  " vim-textobj-indent : インデントされたものをtext-objectに
  NeoBundle 'kana/vim-textobj-indent.git'
  " vim-textobj-function : 関数の中身をtext-objectに
  NeoBundle 'kana/vim-textobj-function.git'
  NeoBundle 'textobj-rubyblock'
  " vim-textobj-entire : buffer全体をtext-objectに
  NeoBundle 'textobj-entire'
  " 「foo」 or 【bar】などをtext-objectに
  NeoBundle 'textobj-jabraces'
" }}}

" 開発効率 {{{
  " vimshell : vimのshell
  NeoBundle 'Shougo/vimshell.git'
  " vimproc : vimから非同期実行。vimshelleで必要
  NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
  " urilib.vim : vim scriptからURLを扱うライブラリ
  NeoBundle 'tyru/urilib.vim'
  " NERD_commenter.vim :コメント処理 (<Leader>c<space>でコメントをトグル)
  NeoBundle 'scrooloose/nerdcommenter.git'
  " perldocやphpmanual等のリファレンスをvim上で見る
  " :Ref perldoc LWP
  " :call ref#rmcache('perldoc') キャッシュを削除
  NeoBundle 'thinca/vim-ref'
  " quickrun.vim : 編集中のファイルを簡単に実行できるプラグイン
  " :QuickRun,  <Leader>r
  NeoBundle 'thinca/vim-quickrun'
  " SQLUtilities : SQL整形、生成ユーティリティ
  NeoBundle 'SQLUtilities'
  " vim-ruby : VimでRubyを扱う際の最も基本的な拡張機能
  NeoBundle 'vim-ruby/vim-ruby'
  " rails.vim : rails的なアレ
  NeoBundle 'tpope/vim-rails'
  " ソースコード上のメソッド宣言、変数宣言の一覧を表示
  NeoBundle 'taglist.vim'
" }}}

" 記録の取り方  {{{
" }}}

" 置換処理  {{{
" }}}

" 入力処理  {{{
  " true/falseをトグルで置き換える
  " ノーマルモードで+, 挿入モードでCTRL-T
  NeoBundle 'taku-o/vim-toggle'
  " smartchr.vim : ==などの前後を整形
  NeoBundle 'smartchr'
NeoBundle 'Shougo/neocomplcache', '', 'default'
call neobundle#config('neocomplcache', {
      \ 'lazy' : 1,
      \ 'autoload' : {
      \   'insert' : 1,
      \ }})

NeoBundle 'Shougo/neocomplcache-rsense', '', 'default'
call neobundle#config('neocomplcache-rsense', {
      \ 'lazy' : 1,
      \ 'depends' : 'Shougo/neocomplcache',
      \ 'autoload' : { 'filetypes' : 'ruby' }
      \ })

NeoBundle 'Shougo/neosnippet', '', 'default'
call neobundle#config('neosnippet', {
      \ 'lazy' : 1,
      \ 'autoload' : {
      \   'insert' : 1,
      \   'filetypes' : 'snippet',
      \   'unite_sources' : ['snippet', 'neosnippet/user', 'neosnippet/runtime'],
      \ }})
" }}}
